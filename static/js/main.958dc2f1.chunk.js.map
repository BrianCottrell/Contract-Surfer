{"version":3,"sources":["assets/logo.png","../../node_modules/web3-eth-accounts/src sync","utils/getWeb3.js","utils/theme.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","getWeb3","Promise","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","theme","createMuiTheme","palette","primary","dark","blueGrey","light","main","secondary","green","useStyles","makeStyles","root","flexGrow","Header","classes","className","AppBar","position","Toolbar","Grid","item","xs","Typography","variant","color","GAS","GAS_PRICE","INITIAL_LOCATION_STATE","location1","location2","location3","location4","App","state","accounts","contract","resultReceived","result","componentDidMount","loopRefresh","component","refreshState","setTimeout","eth","getAccounts","net","getId","networkId","deployedNetwork","MyContract","networks","Contract","abi","address","setState","on","newAccounts","alert","error","getLocations","locations","i","length","methods","getResultReceived","call","received_i","getResult","result_i","toString","handleUpdateForm","name","value","handleRequestResult","makeRequest","send","from","gas","gasPrice","requestId","handleResetResult","this","ThemeProvider","parsedResults","map","loc","push","parseFloat","Number","slice","getFeetFromResult","hasAllResults","Object","values","every","x","bestResult","Math","max","src","logo","style","marginTop","container","TextField","onChange","target","JSON","stringify","indexOf","Button","onClick","data-place","data-tip","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.958dc2f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4cc13249.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 479;","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import green from \"@material-ui/core/colors/green\";\r\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      dark: blueGrey[900],\r\n      light: blueGrey[600],\r\n      main: blueGrey[800]\r\n    },\r\n    secondary: {\r\n      dark: green[900],\r\n      light: green[500],\r\n      main: green[800]\r\n    }\r\n  }\r\n});\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport logo from '../assets/logo.png'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1\r\n  }\r\n});\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Grid item xs>\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n              {/* Contract Surfer */}\r\n            </Typography>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Button, Typography, Grid, TextField } from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport MyContract from \"./contracts/MyContract.json\";\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\nimport getWeb3 from \"./utils/getWeb3\";\r\n\r\nimport { theme } from \"./utils/theme\";\r\nimport logo from './assets/logo.png'\r\nimport Header from \"./components/Header\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst GAS = 500000;\r\nconst GAS_PRICE = \"20000000000\";\r\nconst REQUEST_INFO_TEXT = `This will tie 4 location transactions for today's forecast to the Contract Surfer blockchain`\r\n\r\nconst getFeetFromResult = (result) => Number(result.slice(6, 8)) / 10\r\n\r\nconst INITIAL_LOCATION_STATE = {\r\n  location1: \"33.878727, -118.427179\",\r\n  location2: \"33.148605, -117.353412\",\r\n  location3: \"34.406441, -119.836861\",\r\n  location4: \"34.259463, -119.290774\"\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    web3: null,\r\n    accounts: null,\r\n    ...INITIAL_LOCATION_STATE,\r\n    contract: null,\r\n    resultReceived: false,\r\n    result: \"0\"\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      const web3 = await getWeb3();\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      if (networkId !== 3) {\r\n        throw new Error(\"Select the Ropsten network from your MetaMask plugin\");\r\n      }\r\n      const deployedNetwork = MyContract.networks[networkId];\r\n      const contract = new web3.eth.Contract(\r\n        MyContract.abi,\r\n        deployedNetwork && deployedNetwork.address\r\n      );\r\n\r\n      this.setState({ web3, accounts, contract });\r\n\r\n      window.ethereum.on(\"accountsChanged\", async accounts => {\r\n        const newAccounts = await web3.eth.getAccounts();\r\n        this.setState({ accounts: newAccounts });\r\n      });\r\n\r\n      // Refresh on-chain data every 1 second\r\n      const component = this;\r\n      async function loopRefresh() {\r\n        await component.refreshState();\r\n        setTimeout(loopRefresh, 2000);\r\n      }\r\n      loopRefresh();\r\n    } catch (error) {\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  getLocations = () => {\r\n    const {location1, location2, location3, location4} = this.state\r\n    return [location1, location2, location3, location4]\r\n  }\r\n\r\n  refreshState = async () => {\r\n    const resultReceived = {}\r\n    const result = {}\r\n    const locations = this.getLocations()\r\n    for (var i = 0; i < locations.length; i ++) {\r\n      const received_i = await this.state.contract.methods.getResultReceived(i).call();\r\n      const result_i = (await this.state.contract.methods.getResult(i).call()).toString();\r\n      resultReceived[i] = received_i\r\n      result[i] = result_i\r\n    }\r\n    this.setState({ resultReceived, result });\r\n    // console.group('refresh', resultReceived, result)\r\n  };\r\n\r\n  handleUpdateForm = (name, value) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleRequestResult = async () => {\r\n    const locations = this.getLocations()\r\n    // TODO: group into one transaction or make parallel.\r\n    for (var i = 0; i < locations.length; i ++) { \r\n      console.log('requesting', locations[i], i)\r\n      const requestId = await this.state.contract.methods.makeRequest(locations[i].toString(), i).send({ from: this.state.accounts[0], gas: GAS, gasPrice: GAS_PRICE });\r\n      console.log('requested', requestId)\r\n    }\r\n  };\r\n\r\n  handleResetResult = async () => {\r\n    this.setState({...INITIAL_LOCATION_STATE})\r\n    // await this.state.contract.methods\r\n    //   .resetResult()\r\n    //   .send({ from: this.state.accounts[0], gas: GAS, gasPrice: GAS_PRICE });\r\n  };\r\n\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return (\r\n        <ThemeProvider theme={theme}>\r\n          <div className=\"App\">\r\n            <Header />\r\n\r\n            <Typography>Loading Web3, accounts, and contract...</Typography>\r\n          </div>\r\n        </ThemeProvider>\r\n      );\r\n    }\r\n\r\n    const {result, resultReceived} = this.state\r\n    const locations = this.getLocations()\r\n    const parsedResults = []\r\n    locations.map((loc, i) => {\r\n      if (result[i]) {\r\n        parsedResults.push(parseFloat(getFeetFromResult(result[i])))\r\n      }\r\n    })\r\n    const hasAllResults = Object.values(resultReceived || {}).every(x => x)\r\n    console.log('parsed', parsedResults)\r\n    const bestResult = Math.max(...parsedResults)\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <ReactTooltip />\r\n        <div className=\"App\">\r\n          <Header />\r\n\r\n          <img src={logo} className='header-logo'/>\r\n          <Typography variant=\"h5\" style={{ marginTop: 32 }}>\r\n            {`Please enter the surf venue locations you would like to select from`}\r\n          </Typography>\r\n\r\n          <Grid container style={{ marginTop: 32 }}>\r\n            <Grid item xs>\r\n              <Typography variant=\"h5\" style={{ marginTop: 32 }}>\r\n                Location 1\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Typography variant=\"h5\" style={{ marginTop: 32 }}>\r\n                Location 3\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container style={{ marginTop: 32 }}>\r\n            <Grid item xs>\r\n              <TextField\r\n                id=\"bet-amount\"\r\n                className=\"input\"\r\n                value={this.state.location1}\r\n                onChange={e =>\r\n                  this.handleUpdateForm(\"location1\", e.target.value)\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs>\r\n              <TextField\r\n                id=\"bet-amount\"\r\n                className=\"input\"\r\n                value={this.state.location3}\r\n                onChange={e =>\r\n                  this.handleUpdateForm(\"location3\", e.target.value)\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container style={{ marginTop: 32 }}>\r\n            <Grid item xs>\r\n              <Typography variant=\"h5\" style={{ marginTop: 32 }}>\r\n                Location 2\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Typography variant=\"h5\" style={{ marginTop: 32 }}>\r\n                Location 4\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container style={{ marginTop: 32 }}>\r\n            <Grid item xs>\r\n              <TextField\r\n                id=\"bet-amount\"\r\n                className=\"input\"\r\n                value={this.state.location2}\r\n                onChange={e =>\r\n                  this.handleUpdateForm(\"location2\", e.target.value)\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs>\r\n              <TextField\r\n                id=\"bet-amount\"\r\n                className=\"input\"\r\n                value={this.state.location4}\r\n                onChange={e =>\r\n                  this.handleUpdateForm(\"location4\", e.target.value)\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n            \r\n          <Typography variant=\"h5\" style={{ marginTop: 32 }}>\r\n            {`Results ready: ${JSON.stringify(resultReceived)}`}\r\n          </Typography>\r\n\r\n          <Typography variant=\"h5\" style={{ marginTop: 32 }}>\r\n            {`Results: ${JSON.stringify(parsedResults)} Feet`}\r\n          </Typography>\r\n\r\n          {hasAllResults && <div>\r\n            <Typography variant=\"h5\" style={{ marginTop: 32 }}>\r\n                Best Result: <b>{`${bestResult} Feet at Location ${parsedResults.indexOf(bestResult) + 1}`}</b>\r\n            </Typography>\r\n            <p className='success-text'>Looks like some good waves ahead.</p>\r\n          </div>}\r\n\r\n          <Grid container style={{ marginTop: 32 }}>\r\n            <Grid item xs>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => this.handleResetResult()}\r\n              >\r\n                Reset Inputs\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Button\r\n                data-place='top'\r\n                data-tip={REQUEST_INFO_TEXT}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => this.handleRequestResult()}\r\n              >\r\n                Request Result\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}